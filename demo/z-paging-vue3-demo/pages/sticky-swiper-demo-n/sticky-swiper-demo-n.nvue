<!-- 滑动切换选项卡+吸顶演示（nvue） -->
<template>
	<!-- refresher-only为true代表只使用下拉刷新功能 -->
	<!-- hide-nvue-bottom-tag必须设置为true，因为在安卓设备中，插入的swiper cell下面，不能有其他的view -->
	<!-- @onRefresh代表监听下拉刷新事件 -->
	<z-paging ref="pagePaging" nvue-list-id="z-paging-nlist" refresher-only hide-nvue-bottom-tag @onRefresh="onRefresh">
		<!-- 自定义下拉刷新view(如果use-custom-refresher为true且不设置下面的slot="refresher"，此时不用获取refresherStatus，会自动使用z-paging自带的下拉刷新view) -->
		<template #refresher="{refresherStatus}">
			<custom-refresher :status="refresherStatus" />
		</template>
		<!-- 这个cell是吸顶view上方跟随列表滚动的view(header) -->
		<cell>
			<view ref="header" class="banner-view" style="height: 250rpx;">
				<text style="font-size: 40rpx;font-weight: 700;color: white;">这是一个banner</text>
				<text style="font-size: 24rpx;margin-top: 5rpx;color: white;">下方tab滚动时可吸附在顶部</text>
			</view>
		</cell>
		<!-- 这个cell包含了吸顶view和主体列表，其高度必须等于页面可见高度 -->
		<cell>
			<view :style="'height:' + pageHeight + 'px'">
				<!-- 吸顶view -->
				<!-- 注意！此处的z-tabs为独立的组件，可替换为第三方的tabs，若需要使用z-tabs，请在插件市场搜索z-tabs并引入，否则会报插件找不到的错误 -->
				<z-tabs ref="tabs" :list="tabList" :current="current" @change="tabsChange" />
				<!-- swiper -->
				<swiper class="swiper" :current="current" @change="swiperChange" @transition="swiperTransition" @animationfinish="swiperAnimationfinish">
					<swiper-item class="swiper-item" v-for="(item, index) in tabList" :key="index">
						<!-- 这里的sticky-swiper-item-n为demo中为演示用定义的组件，列表及分页代码在sticky-swiper-item-n组件内 -->
						<!-- 请注意，sticky-swiper-item-n非z-paging内置组件，在自己的项目中必须自己创建，若未创建则会报组件不存在的错误 -->
						<sticky-swiper-item-n :ref="el => swiperItems[index] = el" :tabIndex="index" :currentIndex="current">
						</sticky-swiper-item-n>
					</swiper-item>
				</swiper>
			</view>
		</cell>
	</z-paging>
</template>

<script setup>
	import { ref, watch, nextTick } from 'vue';
	import { onLoad } from '@dcloudio/uni-app';
	import request from '/http/request.js';
	
	
	// #ifdef APP-NVUE
	const dom = weex.requireModule('dom')
	// #endif
	
    const swiperItems = ref([]);
	const pagePaging = ref(null);
	const tabs = ref(null);
	const header = ref(null);
	
	//页面高度
	const pageHeight = ref(0);
	//header高度
	const headerHeight = ref(0);
	//tabs组件的current值，表示当前活动的tab选项
	const current = ref(0);
	const tabList = ref(['测试1','测试2','测试3','测试4']);
	
	
	onLoad(() => {
		// 获取页面可见高度，除去header以外的高度必须等于页面可见高度！
		pageHeight.value = uni.getSystemInfoSync().windowHeight;
		nextTick(() => {
			// 获取header的高度
			dom.getComponentRect(header.value, option => {
				if (option && option.result) {
					headerHeight.value = option.size.height;
				}
			})
		})
	})
	
	
	const onRefresh = () => {
		//触发了下拉刷新，通知当前tabIndex对应子组件的下拉刷新
		swiperItems.value[current.value].reload(() => {
			//当当前显示的列表刷新结束，结束当前页面的刷新状态
			pagePaging.value.endRefresh();
		});
	}
	
	//swiper change时触发
	const swiperChange = (e) => {
		// #ifndef APP-PLUS || H5 || MP-WEIXIN || MP-QQ
		let tempCurrent = e.target.current || e.detail.current;
		tabsChange(tempCurrent);
		// #endif
	}
	
	// tabs通知swiper切换
	const tabsChange = (index) => {
		current.value = index;
	}
	
	//swiper滑动中
	const swiperTransition = (e) => {
		tabs.value.setDx(e.detail.dx);
	}
	
	//swiper滑动结束
	const swiperAnimationfinish = (e) => {
		current.value = e.detail.current;
		tabs.value.unlockDx();
	}
	
	//设置子组件嵌套list父容器支持swiper-list吸顶滚动效果的方法
	const setListSpecialEffects = () => {
		nextTick(() => {
			swiperItems.value[current.value].setSpecialEffects(headerHeight.value);
		})
	}
	
	
	watch(() => current.value, () => {
		setListSpecialEffects();
	}, { immediate: true });
	
	watch(() => headerHeight.value, () => {
		setListSpecialEffects();
	});
</script>

<style>
	.banner-view {
		background-color: #007AFF;
		align-items: center;
		justify-content: center;
	}

	.swiper,
	.swiper-item,
	.swiper-item-content {
		flex: 1;
	}
</style>
